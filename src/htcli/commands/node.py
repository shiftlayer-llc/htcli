"""
Node management commands for the Hypertensor CLI.
All commands follow the format: htcli node <command> [switches]
"""

from typing import Optional

import typer
from rich.console import Console
from rich.panel import Panel

from ..dependencies import get_client
from ..utils.formatting import (format_balance, format_node_list, print_error,
                                print_info, print_success)
from ..utils.password import get_secure_password
from ..utils.validation import (validate_address, validate_amount,
                                validate_delegate_reward_rate,
                                validate_node_id, validate_peer_id,
                                validate_subnet_id)

app = typer.Typer(name="node", help="Node management operations")
console = Console()


def show_comprehensive_guidance(operation: str, details: dict):
    """Show comprehensive guidance for node operations."""
    guidance_messages = {
        "add": {
            "title": "üîó Adding Node to Subnet",
            "description": "This operation will register your node to participate in a subnet.",
            "requirements": [
                "‚Ä¢ Valid subnet ID (must exist and be active)",
                "‚Ä¢ Hotkey address (your node's identity)",
                "‚Ä¢ Peer ID (your node's network identifier)",
                "‚Ä¢ Sufficient TENSOR balance for staking",
                "‚Ä¢ Node must meet subnet's hardware requirements",
            ],
            "process": [
                "1. Validates all input parameters",
                "2. Checks subnet exists and is accepting nodes",
                "3. Verifies your balance is sufficient",
                "4. Submits node registration transaction",
                "5. Node enters queue for activation",
            ],
            "tips": [
                "üí° Check subnet requirements with: htcli subnet info --subnet-id <ID>",
                "üí° Verify your balance with: htcli chain balance <address>",
                "üí° Generate peer ID with your node software",
                "üí° Keep your hotkey secure - it identifies your node",
            ],
        },
        "remove": {
            "title": "üóëÔ∏è Removing Node from Subnet",
            "description": "This operation will deregister your node from a subnet.",
            "requirements": [
                "‚Ä¢ Valid subnet ID and node ID",
                "‚Ä¢ Node must be owned by your hotkey",
                "‚Ä¢ Node must not be actively validating",
                "‚Ä¢ Any staked tokens will be unbonded",
            ],
            "process": [
                "1. Validates node ownership",
                "2. Checks node is not in active validation",
                "3. Initiates unbonding of staked tokens",
                "4. Removes node from subnet",
                "5. Tokens available after unbonding period",
            ],
            "tips": [
                "‚ö†Ô∏è Removing a node will unbond all staked tokens",
                "‚ö†Ô∏è Unbonding period applies before tokens are available",
                "üí° Check node status before removal",
                "üí° Consider deactivating instead of removing if temporary",
            ],
        },
        "deactivate": {
            "title": "‚è∏Ô∏è Deactivating Node",
            "description": "This operation will temporarily deactivate your node.",
            "requirements": [
                "‚Ä¢ Valid subnet ID and node ID",
                "‚Ä¢ Node must be owned by your hotkey",
                "‚Ä¢ Node must be currently active",
            ],
            "process": [
                "1. Validates node ownership and status",
                "2. Sets node status to inactive",
                "3. Node stops participating in validation",
                "4. Stake remains locked but not earning",
                "5. Can be reactivated later",
            ],
            "tips": [
                "üí° Deactivation is reversible unlike removal",
                "üí° Stake remains locked during deactivation",
                "üí° Use this for maintenance or temporary shutdown",
                "üí° Reactivate with appropriate command when ready",
            ],
        },
        "list": {
            "title": "üìã Listing Subnet Nodes",
            "description": "This operation shows all nodes in a subnet.",
            "requirements": ["‚Ä¢ Valid subnet ID"],
            "process": [
                "1. Queries subnet node registry",
                "2. Retrieves node information",
                "3. Displays formatted node list",
                "4. Shows status and stake information",
            ],
            "tips": [
                "üí° Use --format json for programmatic access",
                "üí° Check node status to understand network health",
                "üí° Monitor stake amounts to see network participation",
            ],
        },
    }

    if operation in guidance_messages:
        msg = guidance_messages[operation]

        # Create comprehensive guidance panel
        content = f"[bold]{msg['description']}[/bold]\n\n"

        if "requirements" in msg:
            content += "[bold cyan]üìã Requirements:[/bold cyan]\n"
            for req in msg["requirements"]:
                content += f"{req}\n"
            content += "\n"

        if "process" in msg:
            content += "[bold green]‚öôÔ∏è Process:[/bold green]\n"
            for step in msg["process"]:
                content += f"{step}\n"
            content += "\n"

        if "tips" in msg:
            content += "[bold yellow]üí° Tips & Warnings:[/bold yellow]\n"
            for tip in msg["tips"]:
                content += f"{tip}\n"

        # Add specific details if provided
        if details:
            content += "\n[bold magenta]üìä Current Operation:[/bold magenta]\n"
            for key, value in details.items():
                content += f"‚Ä¢ {key}: {value}\n"

        panel = Panel(content, title=msg["title"], border_style="cyan", padding=(1, 2))

        console.print(panel)
        console.print()


@app.command()
def register(
    subnet_id: int = typer.Option(
        ..., "--subnet-id", "-s", help="Subnet ID to register to"
    ),
    hotkey: str = typer.Option(
        ..., "--hotkey", "-h", help="Hotkey address (node identity)"
    ),
    peer_id: str = typer.Option(..., "--peer-id", "-p", help="Peer ID for networking"),
    bootnode_peer_id: str = typer.Option(
        ..., "--bootnode-peer-id", "-b", help="Bootstrap peer ID for bootnode"
    ),
    client_peer_id: str = typer.Option(
        ..., "--client-peer-id", "-c", help="Client peer ID for client-side operations"
    ),
    stake_amount: int = typer.Option(
        ...,
        "--stake",
        "-st",
        help="Initial stake amount (in smallest units, minimum 100 TENSOR)",
    ),
    delegate_reward_rate: int = typer.Option(
        ..., "--reward-rate", "-r", help="Delegate reward rate (in smallest units)"
    ),
    bootnode: Optional[str] = typer.Option(
        None, "--bootnode", help="Bootnode multiaddress for DHT connection (optional)"
    ),
    key_name: Optional[str] = typer.Option(
        None,
        "--key-name",
        "-k",
        help="Key name for signing (required for registration)",
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Register a subnet node with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üîó Register Subnet Node Guide[/bold cyan]\n\n"
            f"This will register your node to subnet {subnet_id}:\n\n"
            f"[bold]What is Node Registration:[/bold]\n"
            f"‚Ä¢ Registers your node to participate in subnet consensus\n"
            f"‚Ä¢ Transfers stake as proof-of-stake requirement\n"
            f"‚Ä¢ Node enters activation queue with start epoch\n"
            f"‚Ä¢ Hotkey becomes network-unique identifier\n\n"
            f"[bold]Registration Parameters:[/bold]\n"
            f"‚Ä¢ Subnet ID: {subnet_id}\n"
            f"‚Ä¢ Hotkey: {hotkey}\n"
            f"‚Ä¢ Peer ID: {peer_id}\n"
            f"‚Ä¢ Bootnode Peer ID: {bootnode_peer_id}\n"
            f"‚Ä¢ Client Peer ID: {client_peer_id}\n"
            f"‚Ä¢ Stake Amount: {format_balance(stake_amount)}\n"
            f"‚Ä¢ Reward Rate: {format_balance(delegate_reward_rate)}\n"
            f"‚Ä¢ Bootnode: {bootnode or 'Not provided'}\n\n"
            f"[bold]Requirements:[/bold]\n"
            f"‚Ä¢ Minimum 100 TENSOR stake (subnet may require more)\n"
            f"‚Ä¢ Hotkey must be network-unique (never used before)\n"
            f"‚Ä¢ Hotkey cannot match your coldkey\n"
            f"‚Ä¢ Valid peer IDs for networking\n"
            f"‚Ä¢ Sufficient balance for staking\n\n"
            f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
            f"‚Ä¢ Hotkeys are network-unique for security\n"
            f"‚Ä¢ Node enters queue after registration\n"
            f"‚Ä¢ Start epoch assigned based on queue position\n"
            f"‚Ä¢ Grace epochs allow flexible activation timing",
            title="[bold blue]üîó Register Subnet Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(
            f"Register node to subnet {subnet_id} with {format_balance(stake_amount)} stake?"
        ):
            print_info("Node registration cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_address(hotkey):
        print_error("‚ùå Invalid hotkey address format.")
        raise typer.Exit(1)

    if not validate_peer_id(peer_id):
        print_error("‚ùå Invalid peer ID format. Must be a valid MultiHash.")
        raise typer.Exit(1)

    if not validate_peer_id(bootnode_peer_id):
        print_error("‚ùå Invalid bootnode peer ID format. Must be a valid MultiHash.")
        raise typer.Exit(1)

    if not validate_peer_id(client_peer_id):
        print_error("‚ùå Invalid client peer ID format. Must be a valid MultiHash.")
        raise typer.Exit(1)

    if not validate_amount(stake_amount):
        print_error("‚ùå Invalid stake amount. Must be positive.")
        raise typer.Exit(1)

    # Check minimum stake requirement (100 TENSOR = 100 * 10^18)
    min_stake = 100 * 10**18
    if stake_amount < min_stake:
        print_error(
            f"‚ùå Stake amount too low. Minimum required: {format_balance(min_stake)}"
        )
        raise typer.Exit(1)

    if not validate_amount(delegate_reward_rate):
        print_error("‚ùå Invalid delegate reward rate. Must be positive.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for registration)
    if not key_name:
        print_error(
            "‚ùå Key name is required for node registration. Use --key-name to specify your signing key."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîÑ Registering node to subnet {subnet_id}...")

        # Load keypair for signing
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair for subnet node registration",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        response = client.register_subnet_node(
            subnet_id=subnet_id,
            hotkey=hotkey,
            peer_id=peer_id,
            bootnode_peer_id=bootnode_peer_id,
            client_peer_id=client_peer_id,
            stake_amount=stake_amount,
            delegate_reward_rate=delegate_reward_rate,
            bootnode=bootnode,
            keypair=keypair,
        )

        if response.success:
            print_success(f"‚úÖ Node successfully registered to subnet {subnet_id}!")
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üéâ Node Registration Complete![/bold green]\n\n"
                    f"Your node has been successfully registered to subnet {subnet_id}.\n"
                    f"‚Ä¢ Hotkey: {hotkey}\n"
                    f"‚Ä¢ Peer ID: {peer_id}\n"
                    f"‚Ä¢ Bootnode Peer ID: {bootnode_peer_id}\n"
                    f"‚Ä¢ Client Peer ID: {client_peer_id}\n"
                    f"‚Ä¢ Initial Stake: {format_balance(stake_amount)}\n"
                    f"‚Ä¢ Reward Rate: {format_balance(delegate_reward_rate)}\n"
                    f"‚Ä¢ Bootnode: {bootnode or 'Not provided'}\n\n"
                    f"[yellow]‚è≥ Your node is now in the activation queue.[/yellow]\n"
                    f"‚Ä¢ Node has Registered classification\n"
                    f"‚Ä¢ Assigned start epoch for activation\n"
                    f"‚Ä¢ Grace epochs allow flexible activation\n"
                    f"‚Ä¢ Monitor status with: [bold]htcli node list --subnet-id {subnet_id}[/bold]\n\n"
                    f"[yellow]üìä Next Steps:[/yellow]\n"
                    f"‚Ä¢ Wait for start epoch to activate\n"
                    f"‚Ä¢ Monitor queue position\n"
                    f"‚Ä¢ Prepare for validation duties",
                    title="Registration Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to register node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to register node to subnet: {str(e)}")
        raise typer.Exit(1)


@app.command()
def activate(
    subnet_id: int = typer.Option(
        ..., "--subnet-id", "-s", help="Subnet ID to activate in"
    ),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to activate"),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing (required for activation)"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Activate a registered subnet node with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üöÄ Activate Subnet Node Guide[/bold cyan]\n\n"
            f"This will activate node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is Node Activation:[/bold]\n"
            f"‚Ä¢ Moves node from Registered to Active status\n"
            f"‚Ä¢ Node enters Idle classification for idle epochs\n"
            f"‚Ä¢ Node can participate in validation after activation\n"
            f"‚Ä¢ Must be done within queue period + grace epochs\n\n"
            f"[bold]Activation Timeline:[/bold]\n"
            f"‚Ä¢ Start Epoch: When node can first activate\n"
            f"‚Ä¢ Grace Epochs: Flexible activation window\n"
            f"‚Ä¢ Idle Epochs: Node stays in Idle classification\n"
            f"‚Ä¢ Included: Automatic upgrade after idle epochs\n\n"
            f"[bold]Activation Requirements:[/bold]\n"
            f"‚Ä¢ Node must be in Registered status\n"
            f"‚Ä¢ Must be within activation timeframe\n"
            f"‚Ä¢ Subnet must have available slots (or replacement policy)\n"
            f"‚Ä¢ Valid signing key required\n\n"
            f"[bold]Full Subnet Handling:[/bold]\n"
            f"‚Ä¢ If subnet slots are full:\n"
            f"  - Node can replace existing node\n"
            f"  - Or be pushed back into queue\n"
            f"‚Ä¢ Must activate within allowed period\n\n"
            f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
            f"‚Ä¢ Activation window is time-limited\n"
            f"‚Ä¢ Missing activation requires re-registration\n"
            f"‚Ä¢ Node enters Idle classification after activation\n"
            f"‚Ä¢ Included classification requires 66%+ attestation ratio",
            title="[bold blue]üöÄ Activate Subnet Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(f"Activate node {node_id} in subnet {subnet_id}?"):
            print_info("Node activation cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for activation)
    if not key_name:
        print_error(
            "‚ùå Key name is required for node activation. Use --key-name to specify your signing key."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîÑ Activating node {node_id} in subnet {subnet_id}...")

        # Load keypair for signing
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair for subnet activation",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        response = client.activate_subnet_node(
            subnet_id=subnet_id, node_id=node_id, keypair=keypair
        )

        if response.success:
            print_success(
                f"‚úÖ Node {node_id} successfully activated in subnet {subnet_id}!"
            )
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üöÄ Node Activation Complete![/bold green]\n\n"
                    f"Node {node_id} has been successfully activated in subnet {subnet_id}.\n\n"
                    f"[yellow]üìä Node Status Changes:[/yellow]\n"
                    f"‚Ä¢ Status: Registered ‚Üí Active\n"
                    f"‚Ä¢ Classification: Idle (for idle epochs)\n"
                    f"‚Ä¢ Storage: Moved to SubnetNodesData\n"
                    f"‚Ä¢ Count: Added to TotalSubnetNodes\n\n"
                    f"[yellow]‚è≥ Next Phases:[/yellow]\n"
                    f"‚Ä¢ Idle Classification: Node stays idle for idle epochs\n"
                    f"‚Ä¢ Included Classification: Automatic upgrade after idle epochs\n"
                    f"‚Ä¢ Attestation Requirement: 66%+ ratio for included status\n"
                    f"‚Ä¢ Validation: Node can participate in consensus\n\n"
                    f"[yellow]üìã Monitor Progress:[/yellow]\n"
                    f"‚Ä¢ Check status: [bold]htcli node list --subnet-id {subnet_id}[/bold]\n"
                    f"‚Ä¢ Monitor classification changes\n"
                    f"‚Ä¢ Track attestation ratios",
                    title="Activation Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to activate node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to activate node: {str(e)}")
        raise typer.Exit(1)


@app.command()
def status(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to check"),
    format_type: str = typer.Option(
        "table", "--format", "-f", help="Output format (table/json)"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Show detailed node status and classification information."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üìä Node Status & Classification Guide[/bold cyan]\n\n"
            f"This will show detailed status for node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]Node Classifications:[/bold]\n"
            f"‚Ä¢ [yellow]Registered[/yellow]: Node is in registration queue\n"
            f"‚Ä¢ [blue]Idle[/blue]: Node is active but not yet included\n"
            f"‚Ä¢ [green]Included[/green]: Node participates in consensus\n"
            f"‚Ä¢ [red]Validator[/red]: Node is a validator (highest level)\n\n"
            f"[bold]Status Information:[/bold]\n"
            f"‚Ä¢ Current classification and epoch\n"
            f"‚Ä¢ Activation eligibility and timing\n"
            f"‚Ä¢ Stake amounts and reward rates\n"
            f"‚Ä¢ Attestation ratios and penalties\n"
            f"‚Ä¢ Network participation status\n\n"
            f"[bold]Timeline Tracking:[/bold]\n"
            f"‚Ä¢ Registration epoch and queue position\n"
            f"‚Ä¢ Start epoch for activation\n"
            f"‚Ä¢ Grace period remaining\n"
            f"‚Ä¢ Classification upgrade progress\n\n"
            f"[yellow]üí° Tip:[/yellow] Monitor this regularly to track your node's progress!",
            title="[bold blue]üìä Node Status Guide[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    try:
        print_info(f"üìä Checking status for node {node_id} in subnet {subnet_id}...")

        # Get node data
        response = client.get_subnet_node_status(subnet_id, node_id)

        if response.success:
            node_data = response.data.get("node", {})

            if format_type == "json":
                console.print_json(data=node_data)
            else:
                # Create detailed status panel
                from rich.panel import Panel
                from rich.table import Table

                # Determine classification color
                classification = node_data.get("classification", "Unknown")
                if classification == "Registered":
                    class_color = "yellow"
                elif classification == "Idle":
                    class_color = "blue"
                elif classification == "Included":
                    class_color = "green"
                elif classification == "Validator":
                    class_color = "red"
                else:
                    class_color = "white"

                # Create status panel
                status_panel = Panel(
                    f"[bold]Node ID:[/bold] {node_id}\n"
                    f"[bold]Subnet ID:[/bold] {subnet_id}\n"
                    f"[bold]Classification:[/bold] [{class_color}]{classification}[/{class_color}]\n"
                    f"[bold]Hotkey:[/bold] {node_data.get('hotkey', 'N/A')}\n"
                    f"[bold]Peer ID:[/bold] {node_data.get('peer_id', 'N/A')}\n"
                    f"[bold]Stake:[/bold] {format_balance(node_data.get('stake', 0))}\n"
                    f"[bold]Reward Rate:[/bold] {format_balance(node_data.get('delegate_reward_rate', 0))}\n"
                    f"[bold]Registration Epoch:[/bold] {node_data.get('registration_epoch', 'N/A')}\n"
                    f"[bold]Start Epoch:[/bold] {node_data.get('start_epoch', 'N/A')}\n"
                    f"[bold]Current Epoch:[/bold] {node_data.get('current_epoch', 'N/A')}\n"
                    f"[bold]Attestation Ratio:[/bold] {node_data.get('attestation_ratio', 'N/A')}%\n"
                    f"[bold]Penalties:[/bold] {node_data.get('penalties', 0)}",
                    title=f"[bold green]Node {node_id} Status[/bold green]",
                    border_style="green",
                )
                console.print(status_panel)
                console.print()

                # Create timeline table
                timeline_table = Table(title="[bold cyan]Node Timeline[/bold cyan]")
                timeline_table.add_column("Phase", style="cyan", no_wrap=True)
                timeline_table.add_column("Status", style="white")
                timeline_table.add_column("Epoch", style="yellow")
                timeline_table.add_column("Notes", style="dim")

                # Add timeline rows
                registration_epoch = node_data.get("registration_epoch", "N/A")
                start_epoch = node_data.get("start_epoch", "N/A")
                current_epoch = node_data.get("current_epoch", "N/A")
                grace_epochs = node_data.get("grace_epochs", "N/A")
                idle_epochs = node_data.get("idle_epochs", "N/A")

                timeline_table.add_row(
                    "Registration",
                    "‚úÖ Complete",
                    str(registration_epoch),
                    "Node registered to subnet",
                )
                timeline_table.add_row(
                    "Queue Period",
                    "‚è≥ Active",
                    f"{registration_epoch} ‚Üí {start_epoch}",
                    "Waiting for activation window",
                )
                timeline_table.add_row(
                    "Activation Window",
                    "üéØ Ready",
                    f"{start_epoch} + {grace_epochs}",
                    "Can activate now",
                )
                timeline_table.add_row(
                    "Idle Classification",
                    "üîÑ Progress",
                    f"{idle_epochs} epochs",
                    "Building attestation ratio",
                )
                timeline_table.add_row(
                    "Included Classification",
                    "üìà Target",
                    "Auto-upgrade",
                    "Requires 66%+ attestation",
                )

                console.print(timeline_table)
                console.print()

                # Create action recommendations
                classification = node_data.get("classification", "Unknown")
                if classification == "Registered":
                    action_panel = Panel(
                        f"[bold yellow]üéØ Next Action Required:[/bold yellow]\n\n"
                        f"Your node is registered and ready for activation!\n\n"
                        f"[bold]Activation Command:[/bold]\n"
                        f"htcli node activate --subnet-id {subnet_id} --node-id {node_id} --key-name <your-key>\n\n"
                        f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
                        f"‚Ä¢ Activation window is time-limited\n"
                        f"‚Ä¢ Must activate within grace period\n"
                        f"‚Ä¢ Missing activation requires re-registration",
                        title="[bold yellow]üöÄ Ready to Activate[/bold yellow]",
                        border_style="yellow",
                    )
                elif classification == "Idle":
                    action_panel = Panel(
                        f"[bold blue]üîÑ Node is Active:[/bold blue]\n\n"
                        f"Your node is in Idle classification and building attestation ratio.\n\n"
                        f"[bold]Current Status:[/bold]\n"
                        f"‚Ä¢ Active in subnet {subnet_id}\n"
                        f"‚Ä¢ Building attestation ratio\n"
                        f"‚Ä¢ Working towards Included classification\n\n"
                        f"[yellow]üìä Monitor Progress:[/yellow]\n"
                        f"‚Ä¢ Check attestation ratio regularly\n"
                        f"‚Ä¢ Ensure 66%+ ratio for Included upgrade\n"
                        f"‚Ä¢ Monitor for penalties",
                        title="[bold blue]‚è≥ Building Attestation[/bold blue]",
                        border_style="blue",
                    )
                elif classification == "Included":
                    action_panel = Panel(
                        "[bold green]‚úÖ Node is Included:[/bold green]\n\n"
                        "Your node is successfully included in consensus!\n\n"
                        "[bold]Current Status:[/bold]\n"
                        "‚Ä¢ Participating in consensus\n"
                        "‚Ä¢ Earning rewards\n"
                        "‚Ä¢ Contributing to network security\n\n"
                        "[yellow]üéâ Congratulations![/yellow]\n"
                        "‚Ä¢ Your node is fully operational\n"
                        "‚Ä¢ Continue monitoring performance\n"
                        "‚Ä¢ Maintain good attestation ratio",
                        title="[bold green]üéâ Fully Operational[/bold green]",
                        border_style="green",
                    )
                else:
                    action_panel = Panel(
                        f"[bold white]üìä Node Status: {classification}[/bold white]\n\n"
                        f"Your node is in {classification} classification.\n\n"
                        f"[yellow]üí° Monitor:[/yellow]\n"
                        f"‚Ä¢ Check status regularly\n"
                        f"‚Ä¢ Monitor for any issues\n"
                        f"‚Ä¢ Follow subnet guidelines",
                        title="[bold white]üìä Status Monitor[/bold white]",
                        border_style="white",
                    )

                console.print(action_panel)

        else:
            print_error(f"‚ùå Failed to get node status: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to get node status: {str(e)}")
        raise typer.Exit(1)


@app.command()
def remove(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to remove"),
    remove_stake: bool = typer.Option(
        False,
        "--remove-stake",
        "-rs",
        help="Automatically remove stake after node removal",
    ),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Remove a node from a subnet with comprehensive guidance and stake management."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üóëÔ∏è Remove Subnet Node Guide[/bold cyan]\n\n"
            f"This will remove node {node_id} from subnet {subnet_id}:\n\n"
            f"[bold]What is Node Removal:[/bold]\n"
            f"‚Ä¢ Removes node from subnet participation permanently\n"
            f"‚Ä¢ Node stops validating and attesting\n"
            f"‚Ä¢ Stake remains locked (must be removed separately)\n"
            f"‚Ä¢ Cannot remove if node is current epoch validator\n"
            f"‚Ä¢ Node must re-register to return to network\n\n"
            f"[bold]Removal Process:[/bold]\n"
            f"‚Ä¢ Validates node is not current epoch validator\n"
            f"‚Ä¢ Removes node from attestation data\n"
            f"‚Ä¢ Clears peer ID and hotkey mappings\n"
            f"‚Ä¢ Updates total node counts\n"
            f"‚Ä¢ Resets node penalties\n\n"
            f"[bold]Stake Management Options:[/bold]\n"
            f"‚Ä¢ [green]Automatic Removal[/green]: Use --remove-stake flag\n"
            f"‚Ä¢ [yellow]Manual Removal[/yellow]: Remove stake separately after\n"
            f"‚Ä¢ [red]Stake Locked[/red]: Stake remains locked until removed\n"
            f"‚Ä¢ [yellow]Unbonding Period[/yellow]: Applies when stake is removed\n\n"
            f"[bold]Automatic vs Manual Stake Removal:[/bold]\n"
            f"‚Ä¢ [green]Automatic (--remove-stake)[/green]: One-step process, immediate stake removal\n"
            f"‚Ä¢ [yellow]Manual[/yellow]: Two-step process, remove stake separately\n"
            f"‚Ä¢ [yellow]Same Result[/yellow]: Both methods achieve same outcome\n"
            f"‚Ä¢ [yellow]User Choice[/yellow]: Choose based on preference\n\n"
            f"[bold]Removal Requirements:[/bold]\n"
            f"‚Ä¢ Node must not be current epoch validator\n"
            f"‚Ä¢ Valid signing key required\n"
            f"‚Ä¢ Node must be owned by your hotkey\n"
            f"‚Ä¢ Any staked tokens will remain locked until removed\n\n"
            f"[red]‚ö†Ô∏è Critical Warning:[/red]\n"
            f"‚Ä¢ Removal is [bold red]IRREVERSIBLE[/bold red]\n"
            f"‚Ä¢ Node must re-register to return to network\n"
            f"‚Ä¢ Consider deactivation for temporary shutdown\n"
            f"‚Ä¢ Stake must be removed separately (automatic or manual)",
            title="[bold blue]üóëÔ∏è Remove Subnet Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Show stake removal choice guidance
        if remove_stake:
            stake_choice_panel = Panel(
                "[bold green]üîÑ Automatic Stake Removal Selected[/bold green]\n\n"
                "You have chosen to automatically remove stake after node removal.\n\n"
                "[bold]What Will Happen:[/bold]\n"
                "‚Ä¢ Node will be removed from subnet\n"
                "‚Ä¢ Stake will be automatically removed\n"
                "‚Ä¢ Tokens will begin unbonding process\n"
                "‚Ä¢ Complete cleanup in one operation\n\n"
                "[bold]Benefits:[/bold]\n"
                "‚Ä¢ [green]One-step process[/green] - no manual follow-up needed\n"
                "‚Ä¢ [green]Immediate stake removal[/green] - no locked tokens\n"
                "‚Ä¢ [green]Complete cleanup[/green] - node and stake both removed\n"
                "‚Ä¢ [green]Convenient[/green] - single command execution\n\n"
                "[yellow]‚ö†Ô∏è Note:[/yellow]\n"
                "‚Ä¢ Unbonding period still applies\n"
                "‚Ä¢ Tokens won't be immediately available\n"
                "‚Ä¢ Process is irreversible",
                title="Automatic Stake Removal",
                border_style="green",
            )
            console.print(stake_choice_panel)
        else:
            stake_choice_panel = Panel(
                f"[bold yellow]üí∞ Manual Stake Removal Selected[/bold yellow]\n\n"
                f"You have chosen to remove stake manually after node removal.\n\n"
                f"[bold]What Will Happen:[/bold]\n"
                f"‚Ä¢ Node will be removed from subnet\n"
                f"‚Ä¢ Stake will remain locked\n"
                f"‚Ä¢ You must remove stake separately\n"
                f"‚Ä¢ Two-step process required\n\n"
                f"[bold]Manual Process:[/bold]\n"
                f"‚Ä¢ [yellow]Step 1[/yellow]: Remove node (this operation)\n"
                f"‚Ä¢ [yellow]Step 2[/yellow]: Remove stake manually\n"
                f"‚Ä¢ [yellow]Command[/yellow]: htcli stake remove --subnet-id {subnet_id} --node-id {node_id}\n\n"
                f"[bold]Benefits:[/bold]\n"
                f"‚Ä¢ [green]More control[/green] - separate node and stake operations\n"
                f"‚Ä¢ [green]Review opportunity[/green] - check before removing stake\n"
                f"‚Ä¢ [green]Flexibility[/green] - can delay stake removal if needed\n\n"
                f"[red]‚ö†Ô∏è Important:[/red]\n"
                f"‚Ä¢ Stake remains locked until manually removed\n"
                f"‚Ä¢ You must remember to remove stake separately\n"
                f"‚Ä¢ No automatic cleanup of locked tokens",
                title="Manual Stake Removal",
                border_style="yellow",
            )
            console.print(stake_choice_panel)

        console.print()

        # Ask for confirmation with appropriate warning
        if remove_stake:
            console.print(
                "[bold red]‚ö†Ô∏è WARNING: This will permanently remove your node AND automatically remove all stake![/bold red]"
            )
            if not typer.confirm(
                "Are you sure you want to remove this node and all its stake?"
            ):
                print_info("Node removal cancelled.")
                return
        else:
            console.print(
                "[bold red]‚ö†Ô∏è WARNING: This will permanently remove your node and leave stake locked![/bold red]"
            )
            if not typer.confirm(
                "Are you sure you want to remove this node? (Stake will remain locked)"
            ):
                print_info("Node removal cancelled.")
                return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for removal)
    if not key_name:
        print_error(
            "‚ùå Key name is required for node removal. Use --key-name to specify your signing key."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîÑ Removing node {node_id} from subnet {subnet_id}...")

        # Load keypair for signing
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair for subnet node removal",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        # Remove the node
        response = client.remove_subnet_node(
            subnet_id=subnet_id, node_id=node_id, keypair=keypair
        )

        if response.success:
            print_success(
                f"‚úÖ Node {node_id} successfully removed from subnet {subnet_id}!"
            )
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            # Handle stake removal based on user choice
            if remove_stake:
                print_info("üîÑ Automatically removing stake...")

                # Implement actual automatic stake removal
                stake_removal_response = client.remove_node_stake_automatically(
                    subnet_id=subnet_id, node_id=node_id, key_name=key_name
                )

                if stake_removal_response.success:
                    stake_data = stake_removal_response.data
                    removed_amount = stake_data.get("removed_amount", 0)
                    shares_removed = stake_data.get("shares_removed", 0)
                    unbonding_started = stake_data.get("unbonding_started", False)

                    # Show transaction details if available
                    if stake_removal_response.transaction_hash:
                        console.print(
                            f"üìÑ Stake Removal Transaction Hash: [bold cyan]{stake_removal_response.transaction_hash}[/bold cyan]"
                        )
                    if stake_removal_response.block_number:
                        console.print(
                            f"üì¶ Stake Removal Block Number: [bold cyan]#{stake_removal_response.block_number}[/bold cyan]"
                        )

                    # Show comprehensive success message
                    console.print(
                        Panel(
                            f"[bold green]üîÑ Automatic Stake Removal Success![/bold green]\n\n"
                            f"Node {node_id} has been removed and stake removal completed.\n\n"
                            f"[yellow]üìä What Happened:[/yellow]\n"
                            f"‚Ä¢ ‚úÖ Node removed from subnet {subnet_id}\n"
                            f"‚Ä¢ ‚úÖ Stake removal transaction submitted\n"
                            f"‚Ä¢ üì¶ Stake unbonding period started\n"
                            f"‚Ä¢ üí∞ {format_balance(removed_amount)} TENSOR will be returned after unbonding\n\n"
                            f"[yellow]üìà Stake Details:[/yellow]\n"
                            f"‚Ä¢ [green]Shares Removed[/green]: {shares_removed:,}\n"
                            f"‚Ä¢ [green]Estimated Value[/green]: {format_balance(removed_amount)} TENSOR\n"
                            f"‚Ä¢ [green]Unbonding Status[/green]: {'Started' if unbonding_started else 'Pending'}\n\n"
                            f"[yellow]‚è≥ Unbonding Process:[/yellow]\n"
                            f"‚Ä¢ [yellow]Unbonding Period[/yellow]: Tokens locked for unbonding duration\n"
                            f"‚Ä¢ [yellow]No Rewards[/yellow]: No more rewards earned during unbonding\n"
                            f"‚Ä¢ [yellow]Secure Process[/yellow]: Tokens are safe during unbonding\n"
                            f"‚Ä¢ [yellow]Automatic Return[/yellow]: Tokens return to wallet after period\n\n"
                            f"[yellow]üìã Monitor Progress:[/yellow]\n"
                            f"‚Ä¢ Check unbonding status: htcli stake info --subnet-id {subnet_id} --node-id {node_id}\n"
                            f"‚Ä¢ Monitor wallet balance: htcli chain balance --address <your-address>\n"
                            f"‚Ä¢ Track unbonding progress in your wallet\n\n"
                            f"[yellow]üí° Tip:[/yellow]\n"
                            f"‚Ä¢ Unbonding period varies by network\n"
                            f"‚Ä¢ Tokens are safe during unbonding\n"
                            f"‚Ä¢ Consider staking to other nodes/subnets\n"
                            f"‚Ä¢ Plan your next staking strategy",
                            title="Automatic Stake Removal Success",
                            border_style="green",
                        )
                    )

                    # Show final success message
                    console.print(
                        Panel(
                            f"[bold green]üéâ Complete Node Removal Success![/bold green]\n\n"
                            f"Node {node_id} has been completely removed from subnet {subnet_id}.\n\n"
                            f"[green]‚úÖ What's Complete:[/green]\n"
                            f"‚Ä¢ Node removed from subnet participation\n"
                            f"‚Ä¢ All stake automatically removed ({format_balance(removed_amount)} TENSOR)\n"
                            f"‚Ä¢ Unbonding process initiated\n"
                            f"‚Ä¢ Complete cleanup finished\n\n"
                            f"[yellow]üìä Final Status:[/yellow]\n"
                            f"‚Ä¢ Node: [red]Removed[/red] (must re-register to return)\n"
                            f"‚Ä¢ Stake: [green]Removed[/green] (unbonding in progress)\n"
                            f"‚Ä¢ Tokens: [yellow]Unbonding[/yellow] (will return after period)\n"
                            f"‚Ä¢ Network: [green]Clean[/green] (no locked resources)\n\n"
                            f"[yellow]üöÄ Next Steps:[/yellow]\n"
                            f"‚Ä¢ Wait for unbonding period to complete\n"
                            f"‚Ä¢ Plan your next staking strategy\n"
                            f"‚Ä¢ Consider staking to other nodes/subnets\n"
                            f"‚Ä¢ Monitor token return to wallet\n\n"
                            f"[yellow]üí° Strategic Tip:[/yellow]\n"
                            f"‚Ä¢ Use returned tokens for new staking opportunities\n"
                            f"‚Ä¢ Consider diversifying across multiple nodes/subnets\n"
                            f"‚Ä¢ Research high-performing nodes for better returns",
                            title="Complete Removal Success",
                            border_style="green",
                        )
                    )
                else:
                    # Handle stake removal failure
                    print_error(
                        f"‚ùå Automatic stake removal failed: {stake_removal_response.message}"
                    )
                    console.print(
                        Panel(
                            f"[bold red]‚ö†Ô∏è Automatic Stake Removal Failed[/bold red]\n\n"
                            f"Node {node_id} was removed, but automatic stake removal failed.\n\n"
                            f"[red]Error:[/red] {stake_removal_response.message}\n\n"
                            f"[bold yellow]Manual Action Required:[/bold yellow]\n"
                            f"You must manually remove your stake using:\n"
                            f"[bold cyan]htcli stake remove --subnet-id {subnet_id} --node-id {node_id} --key-name {key_name}[/bold cyan]\n\n"
                            f"[yellow]üí° Tip:[/yellow]\n"
                            f"‚Ä¢ Your stake is still locked and not earning rewards\n"
                            f"‚Ä¢ Remove it manually to recover your tokens\n"
                            f"‚Ä¢ Consider the manual removal command above",
                            title="Manual Action Required",
                            border_style="red",
                        )
                    )

            else:
                # Show manual stake removal instructions with beautiful formatting
                console.print(
                    Panel(
                        f"[bold yellow]üí∞ Stake Management Required[/bold yellow]\n\n"
                        f"Node {node_id} has been removed, but stake remains locked.\n\n"
                        f"[bold red]‚ö†Ô∏è Important:[/bold red]\n"
                        f"‚Ä¢ [red]Stake is still locked[/red] and must be removed manually\n"
                        f"‚Ä¢ [red]No rewards earned[/red] on locked stake\n"
                        f"‚Ä¢ [red]Tokens unavailable[/red] until stake is removed\n"
                        f"‚Ä¢ [yellow]You must take action[/yellow] to recover your tokens\n\n"
                        f"[bold green]üîÑ Manual Stake Removal Command:[/bold green]\n"
                        f"[bold cyan]htcli stake remove --subnet-id {subnet_id} --node-id {node_id} --key-name {key_name}[/bold cyan]\n\n"
                        f"[bold]Stake Removal Process:[/bold]\n"
                        f"‚Ä¢ [yellow]Step 1[/yellow]: Execute stake removal command\n"
                        f"‚Ä¢ [yellow]Step 2[/yellow]: Stake enters unbonding period\n"
                        f"‚Ä¢ [yellow]Step 3[/yellow]: Tokens return after unbonding\n"
                        f"‚Ä¢ [yellow]Step 4[/yellow]: Tokens available in wallet\n\n"
                        f"[bold]Why Manual Removal?[/bold]\n"
                        f"‚Ä¢ [green]More control[/green] over the process\n"
                        f"‚Ä¢ [green]Review opportunity[/green] before removing stake\n"
                        f"‚Ä¢ [green]Flexibility[/green] to delay if needed\n"
                        f"‚Ä¢ [green]Separate operations[/green] for better tracking\n\n"
                        f"[yellow]üí° Recommendation:[/yellow]\n"
                        f"‚Ä¢ Remove stake soon to avoid leaving tokens locked\n"
                        f"‚Ä¢ Use returned tokens for new staking opportunities\n"
                        f"‚Ä¢ Consider automatic removal next time for convenience",
                        title="Manual Stake Removal Required",
                        border_style="yellow",
                    )
                )

                # Show final status with clear next steps
                console.print(
                    Panel(
                        f"[bold green]üóëÔ∏è Node Removal Complete![/bold green]\n\n"
                        f"Node {node_id} has been successfully removed from subnet {subnet_id}.\n\n"
                        f"[yellow]üìä Current Status:[/yellow]\n"
                        f"‚Ä¢ Node: [red]Removed[/red] (must re-register to return)\n"
                        f"‚Ä¢ Stake: [yellow]Locked[/yellow] (must be removed manually)\n"
                        f"‚Ä¢ Tokens: [red]Unavailable[/red] (locked in stake)\n"
                        f"‚Ä¢ Network: [yellow]Partial Cleanup[/yellow] (stake still locked)\n\n"
                        f"[bold red]üö® Immediate Action Required:[/bold red]\n"
                        f"‚Ä¢ Remove stake to recover your tokens\n"
                        f"‚Ä¢ Execute: htcli stake remove --subnet-id {subnet_id} --node-id {node_id}\n"
                        f"‚Ä¢ Monitor unbonding progress\n"
                        f"‚Ä¢ Plan next staking strategy\n\n"
                        f"[yellow]üìã Complete Process:[/yellow]\n"
                        f"‚Ä¢ [green]‚úÖ Node Removal[/green]: Complete\n"
                        f"‚Ä¢ [yellow]üîÑ Stake Removal[/yellow]: Pending (manual action required)\n"
                        f"‚Ä¢ [yellow]‚è≥ Unbonding[/yellow]: Will start after stake removal\n"
                        f"‚Ä¢ [yellow]üí∞ Token Return[/yellow]: After unbonding period\n\n"
                        f"[yellow]üí° Tip:[/yellow]\n"
                        f"‚Ä¢ Don't forget to remove stake manually\n"
                        f"‚Ä¢ Consider automatic removal for future convenience\n"
                        f"‚Ä¢ Use returned tokens for new opportunities",
                        title="Node Removal Success - Stake Action Required",
                        border_style="green",
                    )
                )

        else:
            print_error(f"‚ùå Failed to remove node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to remove node: {str(e)}")
        raise typer.Exit(1)


@app.command()
def deactivate(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to deactivate"),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Deactivate a subnet node temporarily with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]‚è∏Ô∏è Deactivate Subnet Node Guide[/bold cyan]\n\n"
            f"This will temporarily deactivate node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is Node Deactivation:[/bold]\n"
            f"‚Ä¢ Temporarily stops node participation\n"
            f"‚Ä¢ Node becomes inactive but not removed\n"
            f"‚Ä¢ Stake remains locked during deactivation\n"
            f"‚Ä¢ Only Validator-classified nodes can deactivate\n"
            f"‚Ä¢ Must last at least one epoch\n\n"
            f"[bold]Deactivation vs Removal:[/bold]\n"
            f"‚Ä¢ [green]Deactivation[/green]: Temporary, reversible, stake locked\n"
            f"‚Ä¢ [red]Removal[/red]: Permanent, irreversible, stake must be removed separately\n"
            f"‚Ä¢ [yellow]Use deactivation for maintenance or temporary shutdown[/yellow]\n\n"
            f"[bold]Deactivation Process:[/bold]\n"
            f"‚Ä¢ Validates node is Validator classification\n"
            f"‚Ä¢ Moves node from active to deactivated storage\n"
            f"‚Ä¢ Updates total node counts\n"
            f"‚Ä¢ Stake remains locked and secure\n"
            f"‚Ä¢ Node stops earning rewards\n\n"
            f"[bold]Stake During Deactivation:[/bold]\n"
            f"‚Ä¢ [yellow]Stake remains locked[/yellow] - no automatic unbonding\n"
            f"‚Ä¢ [yellow]No rewards earned[/yellow] - node not participating\n"
            f"‚Ä¢ [yellow]Stake is secure[/yellow] - cannot be slashed while inactive\n"
            f"‚Ä¢ [yellow]Can be reactivated[/yellow] - stake automatically available\n\n"
            f"[bold]Deactivation Requirements:[/bold]\n"
            f"‚Ä¢ Node must be Validator classification\n"
            f"‚Ä¢ Valid signing key required\n"
            f"‚Ä¢ Must last at least one epoch\n"
            f"‚Ä¢ Cannot exceed MaxDeactivationEpochs\n\n"
            f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
            f"‚Ä¢ Deactivation is temporary and reversible\n"
            f"‚Ä¢ Stake remains locked during deactivation\n"
            f"‚Ä¢ Use for maintenance, not permanent removal\n"
            f"‚Ä¢ Reactivate when ready to resume participation",
            title="[bold blue]‚è∏Ô∏è Deactivate Subnet Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(f"Deactivate node {node_id} in subnet {subnet_id}?"):
            print_info("Node deactivation cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for deactivation)
    if not key_name:
        print_error(
            "‚ùå Key name is required for node deactivation. Use --key-name to specify your signing key."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîÑ Deactivating node {node_id} in subnet {subnet_id}...")

        # Load keypair for signing
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair for subnet activation",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        # Deactivate the node
        response = client.deactivate_subnet_node(
            subnet_id=subnet_id, node_id=node_id, keypair=keypair
        )

        if response.success:
            print_success(
                f"‚úÖ Node {node_id} successfully deactivated in subnet {subnet_id}!"
            )
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]‚è∏Ô∏è Node Deactivation Complete![/bold green]\n\n"
                    f"Node {node_id} has been successfully deactivated in subnet {subnet_id}.\n\n"
                    f"[yellow]üìä What Happened:[/yellow]\n"
                    f"‚Ä¢ Node moved from active to deactivated storage\n"
                    f"‚Ä¢ Total node count updated\n"
                    f"‚Ä¢ Node stopped participating in consensus\n"
                    f"‚Ä¢ Stake remains locked and secure\n\n"
                    f"[yellow]üí∞ Stake Status:[/yellow]\n"
                    f"‚Ä¢ [green]Stake remains locked[/green] - no automatic unbonding\n"
                    f"‚Ä¢ [yellow]No rewards earned[/yellow] - node not participating\n"
                    f"‚Ä¢ [green]Stake is secure[/green] - cannot be slashed while inactive\n"
                    f"‚Ä¢ [green]Ready for reactivation[/green] - stake automatically available\n\n"
                    f"[yellow]‚è≥ Deactivation Period:[/yellow]\n"
                    f"‚Ä¢ Must last at least one epoch\n"
                    f"‚Ä¢ Cannot exceed MaxDeactivationEpochs\n"
                    f"‚Ä¢ Monitor deactivation status\n"
                    f"‚Ä¢ Reactivate when ready\n\n"
                    f"[yellow]üìã Next Steps:[/yellow]\n"
                    f"‚Ä¢ Monitor status: htcli node status --subnet-id {subnet_id} --node-id {node_id}\n"
                    f"‚Ä¢ Reactivate when ready: htcli node reactivate --subnet-id {subnet_id} --node-id {node_id}\n"
                    f"‚Ä¢ Check stake status: htcli stake info --subnet-id {subnet_id}\n\n"
                    f"[yellow]üí° Tip:[/yellow]\n"
                    f"‚Ä¢ Deactivation is temporary and reversible\n"
                    f"‚Ä¢ Use for maintenance or temporary shutdown\n"
                    f"‚Ä¢ Stake remains secure during deactivation\n"
                    f"‚Ä¢ Reactivate when ready to resume participation",
                    title="Deactivation Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to deactivate node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to deactivate node: {str(e)}")
        raise typer.Exit(1)


@app.command()
def reactivate(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to reactivate"),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Reactivate a subnet node with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üöÄ Reactivate Subnet Node Guide[/bold cyan]\n\n"
            f"This will reactivate node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is Node Reactivation:[/bold]\n"
            f"‚Ä¢ Moves node from deactivated to active status\n"
            f"‚Ä¢ Node becomes Validator classification immediately\n"
            f"‚Ä¢ Begins consensus participation on following epoch\n"
            f"‚Ä¢ Stake becomes available for earning rewards\n"
            f"‚Ä¢ Must reactivate within MaxDeactivationEpochs\n\n"
            f"[bold]Reactivation Process:[/bold]\n"
            f"‚Ä¢ Validates node is in deactivated storage\n"
            f"‚Ä¢ Moves node to active storage (SubnetNodesData)\n"
            f"‚Ä¢ Sets classification to Validator\n"
            f"‚Ä¢ Sets start epoch to current epoch + 1\n"
            f"‚Ä¢ Updates total node counts\n"
            f"‚Ä¢ Stake becomes available for rewards\n\n"
            f"[bold]Time Limits:[/bold]\n"
            f"‚Ä¢ Must reactivate within MaxDeactivationEpochs\n"
            f"‚Ä¢ From deactivation epoch + 1\n"
            f"‚Ä¢ After MaxDeactivationEpochs, must remove and re-register\n"
            f"‚Ä¢ Cleanup functions available for expired nodes\n\n"
            f"[bold]Stake During Reactivation:[/bold]\n"
            f"‚Ä¢ [green]Stake becomes available[/green] - can be used for staking\n"
            f"‚Ä¢ [green]Rewards resume[/green] - node can earn rewards\n"
            f"‚Ä¢ [green]Stake is secure[/green] - cannot be slashed while active\n"
            f"‚Ä¢ [green]Ready for full operation[/green] - node is fully operational\n\n"
            f"[bold]Reactivation Requirements:[/bold]\n"
            f"‚Ä¢ Node must be in deactivated status\n"
            f"‚Ä¢ Valid signing key required\n"
            f"‚Ä¢ Cannot exceed MaxDeactivationEpochs\n"
            f"‚Ä¢ Must reactivate within time limit\n\n"
            f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
            f"‚Ä¢ Reactivation has strict time limits\n"
            f"‚Ä¢ After MaxDeactivationEpochs, must remove and re-register\n"
            f"‚Ä¢ Node becomes Validator classification immediately\n"
            f"‚Ä¢ Begins consensus participation on following epoch\n"
            f"‚Ä¢ Cleanup functions available for expired nodes",
            title="[bold blue]üöÄ Reactivate Subnet Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(f"Reactivate node {node_id} in subnet {subnet_id}?"):
            print_info("Node reactivation cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for reactivation)
    if not key_name:
        print_error(
            "‚ùå Key name is required for node reactivation. Use --key-name to specify your signing key."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîÑ Reactivating node {node_id} in subnet {subnet_id}...")

        # Load keypair for signing
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair for subnet activation",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        # Reactivate the node
        response = client.reactivate_subnet_node(
            subnet_id=subnet_id, node_id=node_id, keypair=keypair
        )

        if response.success:
            print_success(
                f"‚úÖ Node {node_id} successfully reactivated in subnet {subnet_id}!"
            )
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üöÄ Node Reactivation Complete![/bold green]\n\n"
                    f"Node {node_id} has been successfully reactivated in subnet {subnet_id}.\n\n"
                    f"[yellow]üìä What Happened:[/yellow]\n"
                    f"‚Ä¢ Node moved from deactivated to active storage\n"
                    f"‚Ä¢ Classification set to Validator\n"
                    f"‚Ä¢ Start epoch set to current epoch + 1\n"
                    f"‚Ä¢ Total node count updated\n"
                    f"‚Ä¢ Node will begin consensus on following epoch\n"
                    f"‚Ä¢ Stake became available for rewards\n\n"
                    f"[yellow]üí∞ Stake Status:[/yellow]\n"
                    f"‚Ä¢ [green]Stake became available[/green] - can be used for staking\n"
                    f"‚Ä¢ [green]Rewards resume[/green] - node can earn rewards\n"
                    f"‚Ä¢ [green]Stake is secure[/green] - cannot be slashed while active\n"
                    f"‚Ä¢ [green]Ready for full operation[/green] - node is fully operational\n\n"
                    f"[yellow]‚è≥ Consensus Participation:[/yellow]\n"
                    f"‚Ä¢ Node classification: Validator\n"
                    f"‚Ä¢ Start epoch: Current epoch + 1\n"
                    f"‚Ä¢ Consensus participation begins on following epoch\n"
                    f"‚Ä¢ Full validator duties resume\n\n"
                    f"[yellow]üìã Next Steps:[/yellow]\n"
                    f"‚Ä¢ Monitor status: htcli node status --subnet-id {subnet_id} --node-id {node_id}\n"
                    f"‚Ä¢ Check consensus participation\n"
                    f"‚Ä¢ Monitor rewards: htcli stake info --subnet-id {subnet_id}\n"
                    f"‚Ä¢ Track validator performance\n\n"
                    f"[yellow]üí° Tip:[/yellow]\n"
                    f"‚Ä¢ Node is now fully operational as a Validator\n"
                    f"‚Ä¢ Consensus participation begins on following epoch\n"
                    f"‚Ä¢ Monitor performance and rewards\n"
                    f"‚Ä¢ Keep node running for optimal performance",
                    title="Reactivation Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to reactivate node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to reactivate node: {str(e)}")
        raise typer.Exit(1)


@app.command()
def cleanup_expired(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to cleanup"),
    cleanup_type: str = typer.Option(
        "deactivated", "--type", "-t", help="Cleanup type (deactivated/registered)"
    ),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing (optional for cleanup)"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Cleanup expired nodes that failed to activate or reactivate."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üßπ Cleanup Expired Node Guide[/bold cyan]\n\n"
            f"This will cleanup expired node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is Node Cleanup:[/bold]\n"
            f"‚Ä¢ Removes nodes that failed to activate/reactivate in time\n"
            f"‚Ä¢ Anyone can call cleanup functions\n"
            f"‚Ä¢ Frees up storage and resources\n"
            f"‚Ä¢ Required for nodes that exceed time limits\n\n"
            f"[bold]Cleanup Types:[/bold]\n"
            f"‚Ä¢ [yellow]deactivated[/yellow]: Nodes that failed to reactivate in time\n"
            f"‚Ä¢ [yellow]registered[/yellow]: Nodes that failed to activate in time\n"
            f"‚Ä¢ [yellow]Both types[/yellow]: Can be cleaned up by anyone\n\n"
            f"[bold]When Cleanup is Needed:[/bold]\n"
            f"‚Ä¢ Deactivated nodes exceed MaxDeactivationEpochs\n"
            f"‚Ä¢ Registered nodes exceed activation time limits\n"
            f"‚Ä¢ Nodes that failed to meet requirements\n"
            f"‚Ä¢ Storage cleanup and resource management\n\n"
            f"[bold]Cleanup Process:[/bold]\n"
            f"‚Ä¢ Validates node is expired and eligible for cleanup\n"
            f"‚Ä¢ Removes node from storage\n"
            f"‚Ä¢ Frees up resources and storage\n"
            f"‚Ä¢ Stake handling depends on node state\n\n"
            f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
            f"‚Ä¢ Cleanup is irreversible\n"
            f"‚Ä¢ Anyone can call cleanup functions\n"
            f"‚Ä¢ Only affects expired/failed nodes\n"
            f"‚Ä¢ Stake may need separate handling",
            title="[bold blue]üßπ Cleanup Expired Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(
            f"Cleanup expired {cleanup_type} node {node_id} in subnet {subnet_id}?"
        ):
            print_info("Node cleanup cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    if cleanup_type not in ["deactivated", "registered"]:
        print_error("‚ùå Invalid cleanup type. Must be 'deactivated' or 'registered'.")
        raise typer.Exit(1)

    try:
        print_info(
            f"üßπ Cleaning up expired {cleanup_type} node {node_id} in subnet {subnet_id}..."
        )

        # Load keypair for signing if provided
        keypair = None
        if key_name:
            from ..utils.crypto import load_keypair

            # Get secure password for keypair

            password = get_secure_password(
                key_name,
                prompt_message="Enter password to unlock keypair for expired node cleanup",
                allow_default=True,
            )
            keypair = load_keypair(key_name, password)

        # Cleanup the expired node
        response = client.cleanup_expired_node(
            subnet_id=subnet_id,
            node_id=node_id,
            cleanup_type=cleanup_type,
            keypair=keypair,
        )

        if response.success:
            print_success(
                f"‚úÖ Successfully cleaned up expired {cleanup_type} node {node_id}!"
            )
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üßπ Node Cleanup Complete![/bold green]\n\n"
                    f"Expired {cleanup_type} node {node_id} has been cleaned up from subnet {subnet_id}.\n\n"
                    f"[yellow]üìä What Happened:[/yellow]\n"
                    f"‚Ä¢ Node removed from {cleanup_type} storage\n"
                    f"‚Ä¢ Storage and resources freed\n"
                    f"‚Ä¢ Network cleanup completed\n"
                    f"‚Ä¢ Expired node data cleared\n\n"
                    f"[yellow]üí∞ Stake Status:[/yellow]\n"
                    f"‚Ä¢ [yellow]Stake may need separate handling[/yellow]\n"
                    f"‚Ä¢ [yellow]Check stake status with: htcli stake info --subnet-id {subnet_id}[/yellow]\n"
                    f"‚Ä¢ [yellow]Remove stake if needed: htcli stake remove --subnet-id {subnet_id} --node-id {node_id}[/yellow]\n\n"
                    f"[yellow]üìã Next Steps:[/yellow]\n"
                    f"‚Ä¢ Check stake status: htcli stake info --subnet-id {subnet_id}\n"
                    f"‚Ä¢ Remove stake if needed\n"
                    f"‚Ä¢ Consider re-registering if desired\n"
                    f"‚Ä¢ Monitor network health\n\n"
                    f"[yellow]üí° Tip:[/yellow]\n"
                    f"‚Ä¢ Cleanup is irreversible\n"
                    f"‚Ä¢ Only affects expired/failed nodes\n"
                    f"‚Ä¢ Anyone can call cleanup functions\n"
                    f"‚Ä¢ Helps maintain network efficiency",
                    title="Cleanup Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to cleanup node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to cleanup node: {str(e)}")
        raise typer.Exit(1)


@app.command()
def update(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to update"),
    delegate_reward_rate: int = typer.Option(
        ...,
        "--delegate-reward-rate",
        "-r",
        help="New delegate reward rate (in smallest units)",
    ),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Update subnet node delegate stake rate with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üîÑ Update Subnet Node Guide[/bold cyan]\n\n"
            f"This will update the delegate reward rate for node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is Delegate Stake Rate:[/bold]\n"
            f"‚Ä¢ Percentage of node's incentives shared with delegators\n"
            f"‚Ä¢ Determines how much delegators earn from node rewards\n"
            f"‚Ä¢ Higher rate = more rewards for delegators\n"
            f"‚Ä¢ Lower rate = more rewards for node operator\n"
            f"‚Ä¢ Affects delegation attractiveness\n\n"
            f"[bold]Rate Update Rules:[/bold]\n"
            f"‚Ä¢ [green]Increase[/green]: No limitations, can increase anytime\n"
            f"‚Ä¢ [yellow]Decrease[/yellow]: Limited to 1% decrease per 24 hours\n"
            f"‚Ä¢ [yellow]Gradual Changes[/yellow]: Large decreases must be done gradually\n"
            f"‚Ä¢ [yellow]Strategic Planning[/yellow]: Plan rate changes carefully\n\n"
            f"[bold]Impact on Delegators:[/bold]\n"
            f"‚Ä¢ [green]Rate Increase[/green]: More rewards for delegators\n"
            f"‚Ä¢ [yellow]Rate Decrease[/yellow]: Fewer rewards for delegators\n"
            f"‚Ä¢ [yellow]Delegation Decisions[/yellow]: Rate affects delegation choices\n"
            f"‚Ä¢ [yellow]Competitive Positioning[/yellow]: Rate affects node attractiveness\n\n"
            f"[bold]Update Process:[/bold]\n"
            f"‚Ä¢ Validates current delegate reward rate\n"
            f"‚Ä¢ Checks rate change limitations\n"
            f"‚Ä¢ Updates rate on blockchain\n"
            f"‚Ä¢ Affects future reward distribution\n"
            f"‚Ä¢ Requires valid signing key\n\n"
            f"[bold]Strategic Considerations:[/bold]\n"
            f"‚Ä¢ [yellow]Competitive Rates[/yellow]: Balance operator and delegator interests\n"
            f"‚Ä¢ [yellow]Market Conditions[/yellow]: Adjust based on network conditions\n"
            f"‚Ä¢ [yellow]Delegation Growth[/yellow]: Higher rates attract more delegators\n"
            f"‚Ä¢ [yellow]Revenue Optimization[/yellow]: Find optimal rate for your strategy\n\n"
            f"[yellow]‚ö†Ô∏è Important:[/yellow]\n"
            f"‚Ä¢ Rate decreases are limited to 1% per 24 hours\n"
            f"‚Ä¢ Plan large decreases carefully\n"
            f"‚Ä¢ Rate changes affect delegation decisions\n"
            f"‚Ä¢ Monitor delegation response to rate changes\n"
            f"‚Ä¢ Balance operator and delegator interests",
            title="[bold blue]üîÑ Update Subnet Node[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(
            f"Update delegate reward rate for node {node_id} in subnet {subnet_id}?"
        ):
            print_info("Node update cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_delegate_reward_rate(delegate_reward_rate):
        print_error("‚ùå Invalid delegate reward rate. Must be a positive integer.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for update)
    if not key_name:
        print_error(
            "‚ùå Key name is required for node update. Use --key-name to specify your signing key."
        )
        raise typer.Exit(1)

    try:
        print_info(
            f"üîÑ Updating delegate reward rate for node {node_id} in subnet {subnet_id}..."
        )

        # Load keypair for signing
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        # Update the node's delegate reward rate
        response = client.update_node_delegate_reward_rate(
            subnet_id=subnet_id,
            node_id=node_id,
            new_delegate_reward_rate=delegate_reward_rate,
            keypair=keypair,
        )

        if response.success:
            print_success(
                f"‚úÖ Successfully updated delegate reward rate for node {node_id}!"
            )
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üîÑ Node Update Complete![/bold green]\n\n"
                    f"Delegate reward rate for node {node_id} has been updated in subnet {subnet_id}.\n\n"
                    f"[yellow]üìä What Happened:[/yellow]\n"
                    f"‚Ä¢ Delegate reward rate updated on blockchain\n"
                    f"‚Ä¢ New rate: {delegate_reward_rate} (in smallest units)\n"
                    f"‚Ä¢ Rate change affects future reward distribution\n"
                    f"‚Ä¢ Delegators will see updated rates\n"
                    f"‚Ä¢ Node attractiveness may change\n\n"
                    f"[yellow]üí∞ Impact on Rewards:[/yellow]\n"
                    f"‚Ä¢ [green]Future rewards[/green] will use new rate\n"
                    f"‚Ä¢ [yellow]Existing delegations[/yellow] affected by new rate\n"
                    f"‚Ä¢ [yellow]Delegation decisions[/yellow] may change\n"
                    f"‚Ä¢ [yellow]Competitive positioning[/yellow] updated\n\n"
                    f"[yellow]üìà Strategic Impact:[/yellow]\n"
                    f"‚Ä¢ [green]Higher rate[/green]: More attractive to delegators\n"
                    f"‚Ä¢ [yellow]Lower rate[/yellow]: More rewards for operator\n"
                    f"‚Ä¢ [yellow]Market positioning[/yellow]: Affects delegation choices\n"
                    f"‚Ä¢ [yellow]Revenue optimization[/yellow]: Balance operator/delegator interests\n\n"
                    f"[yellow]üìã Next Steps:[/yellow]\n"
                    f"‚Ä¢ Monitor delegation response: htcli stake info --subnet-id {subnet_id}\n"
                    f"‚Ä¢ Check node status: htcli node status --subnet-id {subnet_id} --node-id {node_id}\n"
                    f"‚Ä¢ Track reward changes over time\n"
                    f"‚Ä¢ Consider further rate adjustments if needed\n\n"
                    f"[yellow]üí° Tip:[/yellow]\n"
                    f"‚Ä¢ Monitor how delegators respond to rate changes\n"
                    f"‚Ä¢ Balance operator and delegator interests\n"
                    f"‚Ä¢ Consider market conditions when setting rates\n"
                    f"‚Ä¢ Plan rate decreases carefully (1% per 24 hours limit)",
                    title="Update Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to update node: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to update node: {str(e)}")
        raise typer.Exit(1)


@app.command()
def update_coldkey(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to update"),
    new_coldkey: str = typer.Option(
        ..., "--new-coldkey", "-c", help="New coldkey address"
    ),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing (current hotkey)"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Update subnet node coldkey with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üîë Update Node Coldkey Guide[/bold cyan]\n\n"
            f"This will update the coldkey for node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is a Coldkey:[/bold]\n"
            f"‚Ä¢ High-security key for infrequent, critical operations\n"
            f"‚Ä¢ Used for ownership transfers and major node decisions\n"
            f"‚Ä¢ Should be stored securely (hardware wallet recommended)\n"
            f"‚Ä¢ Different from hotkey (used for frequent operations)\n"
            f"‚Ä¢ Critical for node security and ownership\n\n"
            f"[bold]Security Requirements:[/bold]\n"
            f"‚Ä¢ [red]Coldkey and hotkey CAN NEVER MATCH[/red]\n"
            f"‚Ä¢ [yellow]Coldkey must be different from current hotkey[/yellow]\n"
            f"‚Ä¢ [yellow]New coldkey must be a valid SS58 address[/yellow]\n"
            f"‚Ä¢ [yellow]Current hotkey must sign this transaction[/yellow]\n"
            f"‚Ä¢ [yellow]Coldkey controls ownership and major decisions[/yellow]\n\n"
            f"[bold]Update Process:[/bold]\n"
            f"‚Ä¢ Validates new coldkey address format\n"
            f"‚Ä¢ Ensures coldkey ‚â† hotkey (security requirement)\n"
            f"‚Ä¢ Updates coldkey on blockchain\n"
            f"‚Ä¢ Requires current hotkey signature\n"
            f"‚Ä¢ Affects future ownership operations\n\n"
            f"[bold]Security Considerations:[/bold]\n"
            f"‚Ä¢ [yellow]Store new coldkey securely[/yellow]\n"
            f"‚Ä¢ [yellow]Use hardware wallet if possible[/yellow]\n"
            f"‚Ä¢ [yellow]Backup coldkey safely[/yellow]\n"
            f"‚Ä¢ [yellow]Test coldkey before major operations[/yellow]\n"
            f"‚Ä¢ [yellow]Keep coldkey separate from hotkey[/yellow]\n\n"
            f"[bold]Impact on Operations:[/bold]\n"
            f"‚Ä¢ [green]Ownership transfers[/green] require new coldkey\n"
            f"‚Ä¢ [green]Major node decisions[/green] use new coldkey\n"
            f"‚Ä¢ [yellow]Daily operations[/yellow] still use hotkey\n"
            f"‚Ä¢ [yellow]Validation/attestation[/yellow] still use hotkey\n"
            f"‚Ä¢ [yellow]Frequent operations[/yellow] unchanged\n\n"
            f"[red]‚ö†Ô∏è Critical Security:[/red]\n"
            f"‚Ä¢ Coldkey and hotkey must be different\n"
            f"‚Ä¢ Store coldkey securely (hardware wallet)\n"
            f"‚Ä¢ Backup coldkey safely\n"
            f"‚Ä¢ Test coldkey before critical operations\n"
            f"‚Ä¢ Keep coldkey separate from hotkey",
            title="[bold blue]üîë Update Node Coldkey[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(
            f"Update coldkey for node {node_id} in subnet {subnet_id}?"
        ):
            print_info("Coldkey update cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_address(new_coldkey):
        print_error("‚ùå Invalid new coldkey address. Must be a valid SS58 address.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for update)
    if not key_name:
        print_error(
            "‚ùå Key name is required for coldkey update. Use --key-name to specify your current hotkey."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîë Updating coldkey for node {node_id} in subnet {subnet_id}...")

        # Load keypair for signing (current hotkey)
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        # Get current hotkey from keypair
        current_hotkey = keypair.ss58_address

        # Security check: ensure coldkey ‚â† hotkey
        if new_coldkey == current_hotkey:
            print_error(
                "‚ùå Security Error: Coldkey and hotkey cannot be the same address!"
            )
            raise typer.Exit(1)

        # Update the node's coldkey
        response = client.update_node_coldkey(
            subnet_id=subnet_id,
            hotkey=current_hotkey,
            new_coldkey=new_coldkey,
            keypair=keypair,
        )

        if response.success:
            print_success(f"‚úÖ Successfully updated coldkey for node {node_id}!")
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üîë Coldkey Update Complete![/bold green]\n\n"
                    f"Coldkey for node {node_id} has been updated in subnet {subnet_id}.\n\n"
                    f"[yellow]üîê Security Update:[/yellow]\n"
                    f"‚Ä¢ New coldkey: [bold cyan]{new_coldkey}[/bold cyan]\n"
                    f"‚Ä¢ Current hotkey: [bold cyan]{current_hotkey}[/bold cyan]\n"
                    f"‚Ä¢ Security requirement: ‚úÖ Coldkey ‚â† Hotkey\n"
                    f"‚Ä¢ Update verified on blockchain\n"
                    f"‚Ä¢ Future ownership operations use new coldkey\n\n"
                    f"[yellow]üîí Security Recommendations:[/yellow]\n"
                    f"‚Ä¢ [green]Store new coldkey securely[/green] (hardware wallet recommended)\n"
                    f"‚Ä¢ [green]Backup coldkey safely[/green] (multiple secure locations)\n"
                    f"‚Ä¢ [green]Test coldkey[/green] before critical operations\n"
                    f"‚Ä¢ [green]Keep coldkey separate[/green] from hotkey\n"
                    f"‚Ä¢ [green]Monitor coldkey usage[/green]\n\n"
                    f"[yellow]üìã Impact on Operations:[/yellow]\n"
                    f"‚Ä¢ [green]Ownership transfers[/green] now require new coldkey\n"
                    f"‚Ä¢ [green]Major node decisions[/green] use new coldkey\n"
                    f"‚Ä¢ [yellow]Daily operations[/yellow] still use current hotkey\n"
                    f"‚Ä¢ [yellow]Validation/attestation[/yellow] unchanged\n"
                    f"‚Ä¢ [yellow]Frequent operations[/yellow] unchanged\n\n"
                    f"[yellow]üìã Next Steps:[/yellow]\n"
                    f"‚Ä¢ Test new coldkey with minor operation\n"
                    f"‚Ä¢ Update coldkey storage and backups\n"
                    f"‚Ä¢ Monitor node operations for issues\n"
                    f"‚Ä¢ Consider updating hotkey if needed\n\n"
                    f"[yellow]üí° Security Tip:[/yellow]\n"
                    f"‚Ä¢ Use hardware wallet for coldkey storage\n"
                    f"‚Ä¢ Keep coldkey offline when possible\n"
                    f"‚Ä¢ Test coldkey before major operations\n"
                    f"‚Ä¢ Monitor for unauthorized coldkey usage",
                    title="Coldkey Update Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to update coldkey: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to update coldkey: {str(e)}")
        raise typer.Exit(1)


@app.command()
def update_hotkey(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    node_id: int = typer.Option(..., "--node-id", "-n", help="Node ID to update"),
    new_hotkey: str = typer.Option(
        ..., "--new-hotkey", "-h", help="New hotkey address"
    ),
    key_name: Optional[str] = typer.Option(
        None, "--key-name", "-k", help="Key name for signing (current coldkey)"
    ),
    show_guidance: bool = typer.Option(
        True, "--guidance/--no-guidance", help="Show comprehensive guidance"
    ),
):
    """Update subnet node hotkey with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance
    if show_guidance:
        from rich.panel import Panel

        guidance_panel = Panel(
            f"[bold cyan]üîë Update Node Hotkey Guide[/bold cyan]\n\n"
            f"This will update the hotkey for node {node_id} in subnet {subnet_id}:\n\n"
            f"[bold]What is a Hotkey:[/bold]\n"
            f"‚Ä¢ Frequent-use key for daily node operations\n"
            f"‚Ä¢ Used for validation, attestation, and frequent tasks\n"
            f"‚Ä¢ Can be stored on node server for convenience\n"
            f"‚Ä¢ Different from coldkey (used for critical operations)\n"
            f"‚Ä¢ Essential for node performance and operations\n\n"
            f"[bold]Security Requirements:[/bold]\n"
            f"‚Ä¢ [red]Coldkey and hotkey CAN NEVER MATCH[/red]\n"
            f"‚Ä¢ [yellow]Hotkey must be different from current coldkey[/yellow]\n"
            f"‚Ä¢ [yellow]New hotkey must be a valid SS58 address[/yellow]\n"
            f"‚Ä¢ [yellow]Current coldkey must sign this transaction[/yellow]\n"
            f"‚Ä¢ [yellow]Hotkey controls daily node operations[/yellow]\n\n"
            f"[bold]Update Process:[/bold]\n"
            f"‚Ä¢ Validates new hotkey address format\n"
            f"‚Ä¢ Ensures hotkey ‚â† coldkey (security requirement)\n"
            f"‚Ä¢ Updates hotkey on blockchain\n"
            f"‚Ä¢ Requires current coldkey signature\n"
            f"‚Ä¢ Affects future daily operations\n\n"
            f"[bold]Operational Impact:[/bold]\n"
            f"‚Ä¢ [yellow]Validation operations[/yellow] use new hotkey\n"
            f"‚Ä¢ [yellow]Attestation operations[/yellow] use new hotkey\n"
            f"‚Ä¢ [yellow]Frequent node tasks[/yellow] use new hotkey\n"
            f"‚Ä¢ [yellow]Daily operations[/yellow] require new hotkey\n"
            f"‚Ä¢ [yellow]Node performance[/yellow] depends on hotkey\n\n"
            f"[bold]Security Considerations:[/bold]\n"
            f"‚Ä¢ [yellow]Store hotkey securely on node server[/yellow]\n"
            f"‚Ä¢ [yellow]Backup hotkey safely[/yellow]\n"
            f"‚Ä¢ [yellow]Test hotkey before major operations[/yellow]\n"
            f"‚Ä¢ [yellow]Keep hotkey separate from coldkey[/yellow]\n"
            f"‚Ä¢ [yellow]Monitor hotkey performance[/yellow]\n\n"
            f"[red]‚ö†Ô∏è Critical Security:[/red]\n"
            f"‚Ä¢ Hotkey and coldkey must be different\n"
            f"‚Ä¢ Store hotkey securely on node server\n"
            f"‚Ä¢ Backup hotkey safely\n"
            f"‚Ä¢ Test hotkey before critical operations\n"
            f"‚Ä¢ Keep hotkey separate from coldkey",
            title="[bold blue]üîë Update Node Hotkey[/bold blue]",
            border_style="blue",
        )
        console.print(guidance_panel)
        console.print()

        # Ask for confirmation
        if not typer.confirm(
            f"Update hotkey for node {node_id} in subnet {subnet_id}?"
        ):
            print_info("Hotkey update cancelled.")
            return

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_node_id(node_id):
        print_error("‚ùå Invalid node ID. Must be a positive integer.")
        raise typer.Exit(1)

    if not validate_address(new_hotkey):
        print_error("‚ùå Invalid new hotkey address. Must be a valid SS58 address.")
        raise typer.Exit(1)

    # Check if key_name is provided (required for update)
    if not key_name:
        print_error(
            "‚ùå Key name is required for hotkey update. Use --key-name to specify your current coldkey."
        )
        raise typer.Exit(1)

    try:
        print_info(f"üîë Updating hotkey for node {node_id} in subnet {subnet_id}...")

        # Load keypair for signing (current coldkey)
        from ..utils.crypto import load_keypair

        # Get secure password for keypair

        password = get_secure_password(
            key_name,
            prompt_message="Enter password to unlock keypair",
            allow_default=True,
        )
        keypair = load_keypair(key_name, password)

        # Get current coldkey from keypair
        current_coldkey = keypair.ss58_address

        # Security check: ensure hotkey ‚â† coldkey
        if new_hotkey == current_coldkey:
            print_error(
                "‚ùå Security Error: Hotkey and coldkey cannot be the same address!"
            )
            raise typer.Exit(1)

        # Update the node's hotkey
        response = client.update_node_hotkey(
            subnet_id=subnet_id,
            old_hotkey=current_coldkey,  # This will be updated to get actual hotkey
            new_hotkey=new_hotkey,
            keypair=keypair,
        )

        if response.success:
            print_success(f"‚úÖ Successfully updated hotkey for node {node_id}!")
            console.print(
                f"üìÑ Transaction Hash: [bold cyan]{response.transaction_hash}[/bold cyan]"
            )
            if response.block_number:
                console.print(
                    f"üì¶ Block Number: [bold cyan]#{response.block_number}[/bold cyan]"
                )

            console.print(
                Panel(
                    f"[bold green]üîë Hotkey Update Complete![/bold green]\n\n"
                    f"Hotkey for node {node_id} has been updated in subnet {subnet_id}.\n\n"
                    f"[yellow]üîê Security Update:[/yellow]\n"
                    f"‚Ä¢ New hotkey: [bold cyan]{new_hotkey}[/bold cyan]\n"
                    f"‚Ä¢ Current coldkey: [bold cyan]{current_coldkey}[/bold cyan]\n"
                    f"‚Ä¢ Security requirement: ‚úÖ Hotkey ‚â† Coldkey\n"
                    f"‚Ä¢ Update verified on blockchain\n"
                    f"‚Ä¢ Future daily operations use new hotkey\n\n"
                    f"[yellow]üîí Security Recommendations:[/yellow]\n"
                    f"‚Ä¢ [green]Store new hotkey securely[/green] on node server\n"
                    f"‚Ä¢ [green]Backup hotkey safely[/green] (secure location)\n"
                    f"‚Ä¢ [green]Test hotkey[/green] before critical operations\n"
                    f"‚Ä¢ [green]Keep hotkey separate[/green] from coldkey\n"
                    f"‚Ä¢ [green]Monitor hotkey performance[/green]\n\n"
                    f"[yellow]üìã Impact on Operations:[/yellow]\n"
                    f"‚Ä¢ [green]Validation operations[/green] now use new hotkey\n"
                    f"‚Ä¢ [green]Attestation operations[/green] use new hotkey\n"
                    f"‚Ä¢ [green]Frequent node tasks[/green] use new hotkey\n"
                    f"‚Ä¢ [yellow]Daily operations[/yellow] require new hotkey\n"
                    f"‚Ä¢ [yellow]Node performance[/yellow] depends on new hotkey\n\n"
                    f"[yellow]üìã Next Steps:[/yellow]\n"
                    f"‚Ä¢ Update node server with new hotkey\n"
                    f"‚Ä¢ Test new hotkey with validation/attestation\n"
                    f"‚Ä¢ Monitor node performance and operations\n"
                    f"‚Ä¢ Update hotkey storage and backups\n\n"
                    f"[yellow]üí° Operational Tip:[/yellow]\n"
                    f"‚Ä¢ Store hotkey securely on node server\n"
                    f"‚Ä¢ Test hotkey before major operations\n"
                    f"‚Ä¢ Monitor node performance after update\n"
                    f"‚Ä¢ Keep hotkey separate from coldkey",
                    title="Hotkey Update Success",
                    border_style="green",
                )
            )
        else:
            print_error(f"‚ùå Failed to update hotkey: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to update hotkey: {str(e)}")
        raise typer.Exit(1)


@app.command()
def list(
    subnet_id: int = typer.Option(..., "--subnet-id", "-s", help="Subnet ID"),
    format_type: str = typer.Option(
        "table", "--format", "-f", help="Output format (table/json)"
    ),
    show_guidance: bool = typer.Option(
        False, "--guidance", help="Show comprehensive guidance"
    ),
):
    """List all nodes in a subnet with comprehensive guidance."""
    client = get_client()

    # Show comprehensive guidance if requested
    if show_guidance:
        show_comprehensive_guidance(
            "list", {"Subnet ID": subnet_id, "Output Format": format_type}
        )

    # Validate inputs
    if not validate_subnet_id(subnet_id):
        print_error("‚ùå Invalid subnet ID. Must be a positive integer.")
        raise typer.Exit(1)

    try:
        print_info(f"üîÑ Retrieving nodes for subnet {subnet_id}...")

        response = client.get_subnet_nodes(subnet_id)

        if response.success:
            nodes = response.data

            if not nodes:
                console.print(
                    Panel(
                        f"[bold yellow]üì≠ No nodes found in subnet {subnet_id}[/bold yellow]\n\n"
                        f"This subnet currently has no registered nodes.\n"
                        f"Add a node with: [bold]htcli node add --subnet-id {subnet_id}[/bold]",
                        title="Empty Subnet",
                        border_style="yellow",
                    )
                )
                return

            if format_type == "json":
                console.print_json(data=nodes)
            else:
                format_node_list(nodes, subnet_id)

            console.print(f"\n‚úÖ Found {len(nodes)} node(s) in subnet {subnet_id}")
        else:
            print_error(f"‚ùå Failed to retrieve nodes: {response.message}")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"‚ùå Failed to list subnet nodes: {str(e)}")
        raise typer.Exit(1)
